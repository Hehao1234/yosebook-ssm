<?xml version="1.0" encoding="UTF-8"?>
<!--
    关于日志level.
    共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.

    All:最低等级的，用于打开所有日志记录.
    Trace:是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出.
    Debug:指出细粒度信息事件对调试应用程序是非常有帮助的.
    Info:消息在粗粒度级别上突出强调应用程序的运行过程.
    Warn:输出警告及warn以下级别的日志.
    Error:输出错误信息日志.
    Fatal:输出每个严重的错误事件将会导致应用程序的退出的日志.
    OFF:最高等级的，用于关闭所有日志记录.
    程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。
-->
<!--
    status:这个用于设置log4j2自身内部的信息输出
    monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数。
-->
<Configuration status="OFF" monitorInterval="1800">
    <properties>
        <property name="LOG_HOME">logs</property>
        <property name="FILE_NAME">all</property>
    </properties>

    <!--
        %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间
        %p : 日志输出格式
        %c : logger的名称
        %m : 日志内容，即 logger.info("message")
        %n : 换行符
        %C : Java类名
        %L : 日志输出所在行数
        %M : 日志输出所在方法名
        hostName : 本地机器名
        hostAddress : 本地ip地址
     -->
    <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
            <!--输出到控制台日志的格式-->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </Console>

        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
        <File name="log" fileName="logs/app.log" append="false">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </File>

        <!-- 这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档
             用来定义超过指定大小自动删除旧的创建新的的Appender-->
        <!--
            immediateFlush：默认为true，每次写入都会执行flush。这可以保证每次数据都被写入磁盘，但是会影响性能。
            filePattern:指定新建日志文件的名称格式.
            Policies:指定滚动日志的策略，就是什么时候进行新建日志文件输出日志.
            TimeBasedTriggeringPolicy:Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。
                                      modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am…而不是7am.
            SizeBasedTriggeringPolicy:Policies子节点，基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小
            DefaultRolloverStrategy:用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)。
        -->
        <RollingFile name="running-log" fileName="${LOG_HOME}/${FILE_NAME}.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/${FILE_NAME}-%d{yyyy-MM-dd-HH}-%i.log"
                     immediateFlush="true">

            <!--只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>

            <PatternLayout
                    pattern="%date{yyyy-MM-dd HH:mm:ss.SSS} %level [%thread][%file:%line] - %msg%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="10 MB"/>
            </Policies>
            <DefaultRolloverStrategy max="20">
                <!--  maxDepth=2:日志文件会按日期放入子文件夹内, 所以要想统计总数, 需要递归统计  -->
                <Delete basePath="${LOG_HOME}/$${date:yyyy-MM}/" maxDepth="2">
                    <!-- glob 项为需要自动清理日志的pattern -->
                    <IfFileName glob="*.log" />
                    <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
                    另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                    <!--7天-->
                    <!-- 1d 表示自动清理掉1天以前的日志文件 -->
                    <!--关于log4j2的定时删除如果filePattern的粒度为HH，那么在<IfLastModified age="24H" />中如果age=1d则不生效 -->
                    <IfLastModified age="24H" />
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>
    </Appenders>

    <!--只有定义了logger并引入的appender，appender才会生效-->
    <!--Loggers节点，常见的有两种:Root和Logger.-->
    <Loggers>

        <!--
            Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。
            level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
            name:用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点.
            AppenderRef：Logger的子节点，用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root.
                        如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，
                        此时我们可以设置Logger的additivity=”false”只在自定义的Appender中进行输出。
        -->
        <Logger name="com.dao" level="TRACE" additivity="true" />

        <!--
            Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出
            level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
            AppenderRef：Root的子节点，用来指定该日志输出到哪个Appender.
        -->
        <Root level="DEBUG">
            <!-- 这里是输入到文件，很重要-->
            <AppenderRef ref="running-log"/>
            <!-- 这里是输入到控制台-->
            <AppenderRef ref="Console"/>
            <!--将当前运行日志输入到文件-->
            <AppenderRef ref="log"/>
        </Root>
    </Loggers>
</Configuration>