<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--指定需要扫描的包，在此配置文件中扫描除Controller的其他有注解的包，
        下面配置Mapper时会扫描dao层包，这里不需要扫描-->
    <context:component-scan base-package="com.tyust.service,com.tyust.admin.service"/>

    <context:property-placeholder system-properties-mode="FALLBACK" location="classpath:jdbc.properties"/>

    <!--配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!--MySQL数据库驱动-->
        <property name="driverClassName" value="${driver}"/>

        <!--连接数据库的URL-->
        <property name="url" value="${url}"/>

        <!--连接数据库的用户名-->
        <property name="username" value="${username}"/>

        <!--连接数据库的密码-->
        <property name="password" value="${password}"/>

        <!--最大连接数-->
        <property name="maxActive" value="${maxActive}"/>

        <!--初始化连接数-->
        <property name="initialSize" value="${initialSize}"/>

        <!--最小空闲连接数-->
        <property name="minIdle" value="${minIdle}"/>

        <!--获取连接最大等待时间-->
        <property name="maxWait" value="${maxWait}"/>

        <!--自动清除无用连接-->
        <property name="removeAbandoned" value="${removeAbandoned}"/>

        <!--清除无用连接的等待时间-->
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>

    </bean>

    <!-- 为数据源添加事务管理器 -->
    <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--当数据源的id与dataSource的名字不一致时，必须配置，一致时可省略-->
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--编写通知声明事务-->
    <tx:advice id="myAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!--运行所有匹配的方法时，不去控制事务，控制为只读-->
            <tx:method name="*query*" read-only="true"/>
            <tx:method name="*get*" read-only="true"/>
            <tx:method name="*Query*" read-only="true"/>
            <tx:method name="*Get*" read-only="true"/>
            <tx:method name="*select*" read-only="true"/>
            <tx:method name="*Select*" read-only="true"/>
            <!--表示除上述方法之外的任意方法都需要控制事务-->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!--编写AOP，让Spring自动对目标对象生成代理，需要使用AspectJ表达式-->
    <aop:config>
        <!--定义切入点-->
        <aop:pointcut id="txPointCut" expression="execution(* com.tyust.service.*.*(..))"/>
        <!--切面：将切入点与通知关联-->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="txPointCut"/>
    </aop:config>

    <!-- 配置MyBatis工厂，同时指定数据源，并与MyBatis完美整合 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">

        <property name="dataSource" ref="dataSource" />

        <property name="typeAliasesPackage" value="com.tyust.entity,com.tyust.admin.entity"/>

        <!-- 当mybatis的xml文件和mapper接口不在相同包下时，需要用mapperLocations属性指定xml文件的路径或者在mybatis配置文件中指定。
             *是个通配符，代表所有的文件，**代表所有目录下 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>

        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <props>
                            <prop key="helperDialect">mysql</prop>
                            <prop key="reasonable">true</prop>
                            <prop key="supportMethodsArguments">true</prop>
                            <prop key="params">count=countSql</prop>
                            <prop key="autoRuntimeDialect">true</prop>
                        </props>
                    </property>
                </bean>
            </array>
        </property>

        <!-- configLocation的属性值为MyBatis的核心配置文件 -->
        <!--        <property name="configLocation" value="classpath:config/mybatis-config.xml"/>-->
    </bean>

    <!--Mapper代理开发，使用Spring自动扫描MyBatis的接口并装配  -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">

        <!-- mybatis-spring组件的扫描器，扫描dao层包 -->
        <property name="basePackage" value="com.tyust.dao,com.tyust.admin.dao"/>

        <!--注 意 , 没 有 必 要 去 指 定 SqlSessionFactory 或 SqlSessionTemplate,
        因 为 MapperScannerConfigurer 将会创建 MapperFactoryBean,之后自动装配。
        但是,如果你使用了一个以上的 DataSource,那么自动装配可能会失效。
        这种情况下,你可以使用 sqlSessionFactoryBeanName 或 sqlSessionTemplateBeanName
        属性来设置正确的bean 名 称来使用。这就是它如何来配置的,注意 bean 的名称是必须的,
        而不是 bean 的引用,因 此,value 属性在这里替代通常的 ref:-->
        <!--      <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
    </bean>
</beans>